{"chunk":1,"numChunks":2,"fileHash":"VaDubENCCp0r5PyaX0WlMkB+exsLnm0/wLxP+JdEzUM=","filePath":"internal/post/post.go","content":"package post\nfunc FetchPosts() ([]model.HomePageData, error) {\n\tpostRows, err := database.Db.Query(`\n\t\tSELECT \n\t\t\tp.id, \n\t\t\tp.title, \n\t\t\tp.content, \n\t\t\tCOALESCE(u.username, 'Unknown') AS username,\n\t\t\tCOALESCE(SUM(CASE WHEN r.type = 'like' THEN 1 ELSE 0 END), 0) AS likes, \n\t\t\tCOALESCE(SUM(CASE WHEN r.type = 'dislike' THEN 1 ELSE 0 END), 0) AS dislikes,\n\t\t\tp.date\n\t\tFROM posts p\n\t\tLEFT JOIN users u ON p.user_id = u.id\n\t\tLEFT JOIN reactions r ON p.id = r.post_id AND r.comment_id IS NULL\n\t\tGROUP BY p.id, p.title, p.content, u.username, p.date\n\t\tORDER BY likes DESC;\n\t`)\n\tif err != nil {\n\t\tlog.Println(\"Error fetching posts:\", err)\n\t\treturn []model.HomePageData{}, nil // Return empty slice instead of error\n\t}\n\tdefer postRows.Close()\n\n\tvar allPosts []model.HomePageData\n\n\tfor postRows.Next() {\n\t\tvar post model.HomePageData\n\t\terr := postRows.Scan(&post.ID, &post.Title, &post.Content, &post.Username, &post.Likes, &post.Dislikes, &post.Date)\n\t\tif err != nil {\n\t\t\tlog.Println(\"Error scanning post row:\", err)\n\t\t\tcontinue // Skip problematic rows instead of failing\n\t\t}\n\t\tallPosts = append(allPosts, post)\n\t}\n\treturn allPosts, nil\n}\nfunc GetPostId() (id int, err error) {\n\terr = database.Db.QueryRow(\"SELECT last_insert_rowid()\").Scan(&id)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treturn id, nil\n}"}