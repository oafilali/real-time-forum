{"chunk":0,"numChunks":1,"fileHash":"FBphm3/ReIA9+8IFBmqXNrdmqZv7lNKRMZgVeg8bLWY=","filePath":"internal/handler/register_handler.go","content":"package handler\n\nimport (\n\t\"forum/internal/user\"\n\t\"forum/internal/util\"\n\t\"net/http\"\n)\n\nfunc RegisterHandler(w http.ResponseWriter, r *http.Request) {\n\tif r.Method == \"POST\" {\n\t\tusername := r.FormValue(\"username\")\n\t\temail := r.FormValue(\"email\")\n\t\tpassword := r.FormValue(\"password\")\n\n\t\tif !util.IsValidEmail(email) {\n\t\t\tutil.JSONResponse(w, http.StatusBadRequest, map[string]string{\"error\": \"Invalid email format\"})\n\t\t\treturn\n\t\t}\n\n\t\tif user.CheckUsernameExists(w, r, username) {\n\t\t\tutil.JSONResponse(w, http.StatusConflict, map[string]string{\"error\": \"Username already taken\"})\n\t\t\treturn\n\t\t}\n\n\t\tif user.CheckEmailExists(w, r, email) {\n\t\t\tutil.JSONResponse(w, http.StatusConflict, map[string]string{\"error\": \"Email already taken\"})\n\t\t\treturn\n\t\t}\n\n\t\thashed, err := user.HashPassword(password)\n\t\tif err != nil {\n\t\t\tutil.JSONResponse(w, http.StatusInternalServerError, map[string]string{\"error\": \"Password hashing failed\"})\n\t\t\treturn\n\t\t}\n\n\t\tif err := user.SaveUser(username, email, hashed); err != nil {\n\t\t\tutil.JSONResponse(w, http.StatusInternalServerError, map[string]string{\"error\": \"User registration failed\"})\n\t\t\treturn\n\t\t}\n\n\t\tutil.JSONResponse(w, http.StatusOK, map[string]string{\"redirect\": \"/login\"})\n\t\treturn\n\t}\n\n\thttp.ServeFile(w, r, \"./web/templates/index.html\")\n}"}