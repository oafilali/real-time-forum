{"chunk":0,"numChunks":1,"fileHash":"q911CuLR/XXl0IJkFAmHGnGwLxWxIEEKX9WzlGGxzzM=","filePath":"internal/handler/middlware.go","content":"package handler\n\nimport (\n\t\"encoding/json\"\n\t\"io\"\n\t\"net/http\"\n)\n\n// Super Simple Middleware\nfunc JSONWrapper(h http.HandlerFunc) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\t// 1. Handle JSON Input\n\t\tif r.Header.Get(\"Content-Type\") == \"application/json\" {\n\t\t\tvar data map[string]string\n\n\t\t\t// Read the request body\n\t\t\tbody, err := io.ReadAll(r.Body)\n\t\t\tif err != nil {\n\t\t\t\tsendJSONError(w, \"Failed to read request body\", http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer r.Body.Close()\n\n\t\t\t// Unmarshal the JSON body into the 'data' map\n\t\t\terr = json.Unmarshal(body, &data)\n\t\t\tif err != nil {\n\t\t\t\tsendJSONError(w, \"Invalid JSON\", http.StatusBadRequest)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\t// 2. Run original handler\n\t\th(w, r)\n\n\t\t// 3. Handle Redirects\n\t\tif location := w.Header().Get(\"Location\"); location != \"\" {\n\t\t\tsendJSONRedirect(w, location)\n\t\t}\n\t}\n}\n\n// Helper to send errors\nfunc sendJSONError(w http.ResponseWriter, message string, code int) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tw.WriteHeader(code)\n\tjson.NewEncoder(w).Encode(map[string]string{\"error\": message})\n}\n\n// Helper to send redirects\nfunc sendJSONRedirect(w http.ResponseWriter, url string) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(map[string]string{\"redirect\": url})\n}\n"}