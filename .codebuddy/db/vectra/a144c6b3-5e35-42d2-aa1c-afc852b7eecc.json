{"chunk":0,"numChunks":1,"fileHash":"NekVbl8+J42uYn9L99qKZTGOR92lhWEOo1bAHopkHFM=","filePath":"internal/user/user.go","content":"package user\n\nimport (\n\t\"fmt\"\n\t\"forum/internal/database\"\n\t\"forum/internal/util\"\n\t\"net/http\"\n\n\t\"golang.org/x/crypto/bcrypt\"\n)\n\nfunc CheckEmailExists(w http.ResponseWriter, r *http.Request, email string) bool {\n\tvar count int\n\terr := database.Db.QueryRow(\"SELECT COUNT(*) FROM users WHERE email = ?\", email).Scan(&count)\n\tif err != nil {\n\t\t// If there's an error querying the database, handle it here\n\t\tutil.ErrorCheckHandlers(w, r, \"Database error\", err, http.StatusInternalServerError)\n\t\treturn true\n\t}\n\treturn count > 0\n}\n\nfunc CheckUsernameExists(w http.ResponseWriter, r *http.Request, username string) bool {\n\tvar count int\n\terr := database.Db.QueryRow(\"SELECT COUNT(*) FROM users WHERE username = ?\", username).Scan(&count)\n\tif err != nil {\n\t\tutil.ErrorCheckHandlers(w, r, \"Database error\", err, http.StatusInternalServerError)\n\t\treturn true\n\t}\n\treturn count > 0\n}\n\nfunc HashPassword(password string) (string, error) {\n\thashed, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)\n\treturn string(hashed), err\n}\n\nfunc SaveUser(username, email, hashedPassword string) error {\n\t_, err := database.Db.Exec(\n\t\t\"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\",\n\t\tusername, email, hashedPassword,\n\t)\n\treturn err\n}\n\nfunc AuthenticateUser(email, password string) (int, error) {\n\tvar userID int\n\tvar storedHash string\n\terr := database.Db.QueryRow(\n\t\t\"SELECT id, password FROM users WHERE email = ?\",\n\t\temail,\n\t).Scan(&userID, &storedHash)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tif bcrypt.CompareHashAndPassword([]byte(storedHash), []byte(password)) != nil {\n\t\treturn 0, fmt.Errorf(\"invalid password\")\n\t}\n\treturn userID, nil\n}\n"}